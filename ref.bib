@inproceedings{bugbox,
	title        = {BugBox: A Vulnerability Corpus for {PHP} Web Applications},
	author       = {Gary Nilson and Kent Wills and Jeffrey Stuckman and James Purtilo},
	year         = 2013,
	booktitle    = {Presented as part of the 6th Workshop on Cyber Security Experimentation and Test},
	publisher    = {{USENIX}},
	address      = {Washington, D.C.},
	url          = {https://www.usenix.org/conference/cset13/workshop-program/presentation/Nilson}
}
@inproceedings{sen2007concolic,
	title        = {Concolic testing},
	author       = {Sen, Koushik},
	year         = 2007,
	booktitle    = {Proceedings of the twenty-second IEEE/ACM international conference on Automated software engineering},
	pages        = {571--572}
}
@inproceedings{Koo:2019:CSD:3301417.3312501,
	title        = {Configuration-Driven Software Debloating},
	author       = {Koo, Hyungjoon and Ghavamnia, Seyedhamed and Polychronakis, Michalis},
	year         = 2019,
	booktitle    = {Proceedings of the 12th European Workshop on Systems Security},
	location     = {Dresden, Germany},
	publisher    = {ACM},
	address      = {New York, NY, USA},
	series       = {EuroSec '19},
	doi          = {10.1145/3301417.3312501},
	isbn         = {978-1-4503-6274-0},
	url          = {http://doi.acm.org/10.1145/3301417.3312501},
	articleno    = 9,
	acmid        = 3312501
}
@inproceedings{wang2009intscope,
	title        = {IntScope: Automatically Detecting Integer Overflow Vulnerability in X86 Binary Using Symbolic Execution.},
	author       = {Wang, Tielei and Wei, Tao and Lin, Zhiqiang and Zou, Wei},
	year         = 2009,
	booktitle    = {NDSS},
	organization = {Citeseer}
}
@inproceedings{5504701,
	title        = {TaintScope: A Checksum-Aware Directed Fuzzing Tool for Automatic Software Vulnerability Detection},
	author       = {Wang, Tielei and Wei, Tao and Gu, Guofei and Zou, Wei},
	year         = 2010,
	booktitle    = {2010 IEEE Symposium on Security and Privacy},
	volume       = {},
	number       = {},
	pages        = {497--512},
	doi          = {10.1109/SP.2010.37}
}
@inproceedings{sen2009dart,
	title        = {DART: Directed Automated Random Testing.},
	author       = {Sen, Koushik},
	year         = 2009,
	booktitle    = {Haifa Verification Conference},
	volume       = 6405,
	pages        = 4
}
@misc{zendframework1,
	title        = {{PHP Zend Framework 1}},
	year         = 2018,
	howpublished = {\url{https://github.com/zendframework/zf1}}
}
@inproceedings{moura2008z3,
	title        = {Z3: An efficient SMT solver},
	author       = {Moura, Leonardo de and Bj{\o}rner, Nikolaj},
	year         = 2008,
	booktitle    = {International conference on Tools and Algorithms for the Construction and Analysis of Systems},
	pages        = {337--340},
	organization = {Springer}
}
@misc{llvmir,
	title        = {{LLVM Intermediate Representation Language}},
	year         = 2022,
	howpublished = {\url{https://llvm.org/docs/LangRef.html}}
}
@misc{twentyfourteen_theme,
	title        = {{WordPress Twenty Fourteen theme}},
	year         = 2022,
	howpublished = {\url{https://wordpress.org/themes/twentyfourteen/}}
}
@misc{twentytwelve_theme,
	title        = {{WordPress Twenty Twelve theme}},
	year         = 2022,
	howpublished = {\url{https://wordpress.org/themes/twentytwelve/}}
}
@misc{elastica,
	title        = {{Elastica: Elasticsearch client}},
	year         = 2022,
	howpublished = {\url{https://github.com/ruflin/Elastica}}
}
@misc{less.php,
	title        = {{less.js ported to PHP}},
	year         = 2022,
	howpublished = {\url{https://github.com/oyejorge/less.php}}
}
@misc{PHP_CodeSniffer,
	title        = {{PHP\_CodeSniffer is a PHP package that tokenizes PHP, JavaScript and CSS files and detects violations of a defined set of coding standards}},
	year         = 2022,
	howpublished = {\url{https://github.com/squizlabs/PHP_CodeSniffer}}
}
@misc{Symfony,
	title        = {{Symfony PHP framework}},
	year         = 2022,
	howpublished = {\url{https://github.com/symfony/symfony}}
}
@misc{Guzzle,
	title        = {{Guzzle: PHP HTTP client}},
	year         = 2022,
	howpublished = {\url{https://github.com/guzzle/guzzle}}
}
@misc{PHPAutoload,
	title        = {{PHP autoload built-in function}},
	year         = 2022,
	howpublished = {\url{http://php.net/manual/en/language.oop5.autoload.php}}
}
@misc{sans-attacksurface,
	title        = {{SANS Technology Institute: Security Laboratory: Defense In Depth Series}},
	author       = {Stephen Northcutt},
	howpublished = {\url{https://www.sans.edu/cyber-research/security-laboratory/article/did-attack-surface}}
}
@book{pfleeger2015security,
	title        = {Security in computing},
	author       = {Pfleeger, Charles P and Pfleeger, Shari Lawrence and Margulies, Jonathan},
	year         = 2015,
	publisher    = {Prentice Hall Professional Technical Reference}
}
@book{mcconnell2004code,
	title        = {Code complete},
	author       = {McConnell, Steve},
	year         = 2004,
	publisher    = {Pearson Education}
}
@misc{owasp-attacksurface,
	title        = {{What is Attack Surface Analysis and Why is it Important?}},
	author       = {{OWASP}},
	howpublished = {\url{https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Attack_Surface_Analysis_Cheat_Sheet.md}}
}
@article{madhavapeddy2013unikernels,
	title        = {{Unikernels: Rise of the virtual library operating system}},
	author       = {Madhavapeddy, Anil and Scott, David J},
	year         = 2013,
	journal      = {Queue},
	publisher    = {ACM},
	volume       = 11,
	number       = 11
}
@article{quach2018debloating,
	title        = {{Debloating Software through Piece-Wise Compilation and Loading}},
	author       = {Quach, Anh and Prakash, Aravind and Yan, Lok Kwong},
	year         = 2018,
	journal      = {Proceedings of USENIX Security}
}
@misc{xdebug-performance2,
	title        = {{Code Coverage: The Present}},
	author       = {Derick Rethans},
	year         = 2022,
	howpublished = {\url{https://derickrethans.nl/code-coverage.html}}
}
@misc{xdebug-performance1,
	title        = {{Xdebug's Code Coverage speedup}},
	author       = {Derick Rethans},
	year         = 2022,
	howpublished = {\url{https://derickrethans.nl/xdebug-codecoverage-speedup.html}}
}
@misc{PHPWakeup,
	title        = {{PHP wakeup built-in function}},
	year         = 2022,
	howpublished = {\url{http://php.net/manual/en/language.oop5.magic.php\#object.wakeup}}
}
@misc{POI,
	title        = {{PHP Object Injection Vulnerability}},
	year         = 2022,
	howpublished = {\url{https://www.owasp.org/index.php/PHP\_Object\_Injection}}
}
@inproceedings{Dahse:2014:CRA:2660267.2660363,
	title        = {{Code Reuse Attacks in PHP: Automated POP Chain Generation}},
	author       = {Dahse, Johannes and Krein, Nikolai and Holz, Thorsten},
	year         = 2014,
	booktitle    = {Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security},
	location     = {Scottsdale, Arizona, USA},
	publisher    = {ACM},
	address      = {New York, NY, USA},
	series       = {CCS '14},
	doi          = {10.1145/2660267.2660363},
	isbn         = {978-1-4503-2957-6},
	url          = {http://doi.acm.org/10.1145/2660267.2660363},
	acmid        = 2660363,
	keywords     = {code reuse attacks, php object injection, property-oriented programming, static code analysis, web security}
}
@misc{phpmyadmin,
	title        = {{phpMyAdmin: MySQL web administration}},
	year         = 2022,
	key          = {php},
	howpublished = {\url{https://phpmyadmin.net/}}
}
@misc{autoappend,
	title        = {{Automatically append or prepend files in a PHP script}},
	year         = 2022,
	howpublished = {\url{https://www.php.net/manual/en/ini.core.php#ini.auto-append-file}}
}
@misc{cvedetails,
	title        = {{CVE Details: The ultimate security vulnerability datasource}},
	year         = 2022,
	howpublished = {\url{https://www.cvedetails.com/}},
	key          = {CVE}
}
@article{koehler2004longitudinal,
	title        = {{A longitudinal study of Web pages continued: a consideration of document persistence}},
	author       = {Koehler, Wallace},
	year         = 2004,
	journal      = {Information Research},
	volume       = 9,
	number       = 2
}
@misc{nistgov,
	title        = {{NIST: National Vulnerability Database}},
	year         = 2022,
	howpublished = {\url{https://nvd.nist.gov/}},
	key          = {CVE}
}
@misc{mediawiki,
	title        = {{MediaWiki: Free and Open Source Software Wiki}},
	year         = 2022,
	key          = {php},
	howpublished = {\url{https://www.mediawiki.org/wiki/MediaWiki}}
}
@misc{magento,
	title        = {{Magento: eCommerce Platform}},
	year         = 2022,
	howpublished = {\url{https://magento.com/}},
	key          = {php}
}
@misc{Metasploit,
	title        = {{Metasploit Framework}},
	year         = 2022,
	howpublished = {\url{https://www.metasploit.com/}}
}
@misc{XDebug,
	title        = {{XDebug Debugger and Profiler Tool for PHP}},
	year         = 2022,
	howpublished = {\url{https://xdebug.org/}}
}
@misc{phpdbg,
	title        = {{phpdbg PHP Debugger}},
	year         = 2022,
	howpublished = {\url{https://github.com/krakjoe/phpdbg}}
}
@misc{xhprof,
	title        = {{xhprof function-level hierarchical profiler for PHP}},
	year         = 2015,
	howpublished = {\url{https://github.com/phacility/xhprof}}
}
@misc{gremlinsjs,
	title        = {{gremlins.js}},
	year         = 2022,
	howpublished = {\url{https://github.com/marmelab/gremlins.js}}
}
@misc{greasemonkey,
	title        = {{Greasemonkey}},
	year         = 2022,
	howpublished = {\url{https://www.greasespot.net/}}
}
@misc{burpsuite,
	title        = {{Burp Suite web vulnerability scanner}},
	year         = 2022,
	howpublished = {\url{https://portswigger.net/burp}}
}
@misc{phpshutdown,
	title        = {{PHP: register\_shutdown\_function - Manual}},
	year         = 2022,
	howpublished = {\url{https://secure.php.net/manual/function.register-shutdown-function.php}}
}
@misc{nodeDownloads,
	title        = {{The State of JavaScript Frameworks}},
	author       = {Laurie Voss},
	year         = 2018,
	howpublished = {\url{https://www.npmjs.com/npm/the-state-of-javascript-frameworks-2017-part-2-the-react-ecosystem}}
}
@misc{pypiDownloads,
	title        = {{PyPI Stats}},
	year         = 2018,
	howpublished = {\url{https://pypistats.org/packages/__all__}}
}
@misc{packagistDownloads,
	title        = {{Packagist statistics}},
	year         = 2018,
	howpublished = {\url{https://packagist.org/statistics}}
}
@misc{packagist,
	title        = {{Packagist - The PHP Package Repository}},
	howpublished = {\url{https://packagist.org/}}
}
@misc{phpAdoption,
	title        = {{PHP Usage Statistics - Built With}},
	year         = 2018,
	howpublished = {\url{https://trends.builtwith.com/framework/PHP}}
}
@misc{composer,
	title        = {{Composer - Dependency Manager for PHP}},
	howpublished = {\url{https://getcomposer.org/}}
}
@misc{symfonyVulnerability,
	title        = {{NVD - CVE-2018-14773 (Symfony vulnerability)}},
	year         = 2018,
	howpublished = {\url{https://nvd.nist.gov/vuln/detail/CVE-2018-14773}}
}
@misc{drupalVulenrability,
	title        = {{Drupal Core - 3rd-party libraries -SA-CORE-2018-005 | Drupal.org}},
	year         = 2018,
	howpublished = {\url{https://www.drupal.org/SA-CORE-2018-005}}
}
@misc{zendVulnerability,
	title        = {{Security Advisory: URL Rewrite vulnerability (Zend Framework)}},
	year         = 2018,
	howpublished = {\url{https://framework.zend.com/security/advisory/ZF2018-01}}
}
@misc{symfonyPatch,
	title        = {{[HttpFoundation] Remove support for legacy and risky HTTP headers - Symfony framework on GitHub}},
	year         = 2018,
	howpublished = {\url{https://github.com/symfony/symfony/commit/e447e8b92148ddb3d1956b96638600ec95e08f6b#diff-9d63a61ac1b3720a090df6b1015822f2R1694}}
}
@misc{phpunitVulnerability,
	title        = {{NVD - CVE-2017-9841 (PHPUnit vulnerability)}},
	year         = 2017,
	howpublished = {\url{https://nvd.nist.gov/vuln/detail/CVE-2017-9841}}
}
@misc{xss,
	title        = {{Cross-site Scripting (XSS) - OWASP}},
	year         = 2022,
	howpublished = {\url{https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)}}
}
@misc{csrf,
	title        = {{Cross-Site Request Forgery (CSRF) - OWASP}},
	year         = 2022,
	howpublished = {\url{https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)}}
}
@misc{rce,
	title        = {{Remote Code Execution Vulnerability | Netsparker}},
	year         = 2022,
	howpublished = {\url{https://www.netsparker.com/blog/web-security/remote-code-evaluation-execution/}}
}
@misc{sqlInjection,
	title        = {{SQL Injection: OWASP}},
	year         = 2022,
	howpublished = {\url{https://www.owasp.org/index.php/SQL_Injection}}
}
@article{McNamee2001,
	title        = {{Specialization tools and techniques for systematic optimization of system software}},
	author       = {McNamee, Dylan and Marlet, Renauld and Walpole, Jonathan and Pu, Calton and Cowan, Crispin and Krasic, Charles and Goel, Ashvin and Wagle, Perry and Consel, Charles and Muller, Gilles},
	year         = 2001,
	journal      = {ACM Transactions on Computer Systems},
	volume       = 19,
	number       = 2,
	doi          = {10.1145/377769.377778},
	issn         = {07342071},
	url          = {http://portal.acm.org/citation.cfm?doid=377769.377778},
	abstract     = {Specialization has been recognized as a powerful$\backslash$ntechnique for optimizing operating systems. However,$\backslash$nspecialization has not been broadly applied beyond the$\backslash$nresearch community because current techniques based on$\backslash$nmanual specialization, are time-consuming and$\backslash$nerror-prone. The goal of the work described in this$\backslash$npaper is to help operating system tuners perform$\backslash$nspecialization more easily. We have built a$\backslash$nspecialization toolkit that assists the major tasks of$\backslash$nspecializing operating systems. We demonstrate the$\backslash$neffectiveness of the toolkit by applying it to three$\backslash$ndiverse operating system components. We show that using$\backslash$ntools to assist specialization enables significant$\backslash$nperformance optimizations without error-prone manual$\backslash$nmodifications. Our experience with the toolkit suggests$\backslash$nnew ways of designing systems that combine high$\backslash$nperformance and clean structure.},
	file         = {:home/babak/Documents/p217-mcnamee.pdf:pdf}
}
@inproceedings{sharif2018Trimmer,
	title        = {{TRIMMER: Application Specialization for Code Debloating}},
	author       = {Sharif, Hashim and Abubakar, Muhammad and Gehani, Ashish and Zaffar, Fareed},
	year         = 2018,
	booktitle    = {Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering},
	location     = {Montpellier, France},
	publisher    = {ACM},
	address      = {NY, USA},
	series       = {ASE 2018},
	doi          = {10.1145/3238147.3238160},
	isbn         = {978-1-4503-5937-5},
	url          = {http://doi.acm.org/10.1145/3238147.3238160},
	acmid        = 3238160,
	keywords     = {Code debloating, LLVM, Program specialization, Static analysis}
}
@article{Mcallister2008,
	title        = {{Expanding Human Interactions for In-Depth Testing of Web Applications}},
	author       = {Mcallister, Sean and Kirda, Engin and Kruegel, Christopher},
	year         = 2008,
	journal      = {Raid},
	doi          = {10.1007/978-3-540-87403-4_11},
	isbn         = {978-3-540-87402-7},
	file         = {:home/babak/Documents/raid08{\_}xss.pdf:pdf}
}
@article{Chen2017,
	title        = {{DamGate: Dynamic Adaptive Multi-feature Gating in Program Binaries}},
	author       = {Chen, Yurong and Lan, Tian and Venkataramani, Guru},
	year         = 2017,
	journal      = {Proceedings of the 2017 Workshop on Forming an Ecosystem Around Software Transformation},
	doi          = {10.1145/3141235.3141243},
	isbn         = {978-1-4503-5395-3},
	url          = {http://doi.acm.org/10.1145/3141235.3141243},
	abstract     = {Feature creep has emerged as a serious threat due to the growing number of utilities and capabilities crammed into modern software systems. While feature elimination and de-bloating techniques can produce slimmer executables, a complete elimination of all unnecessary or unwanted features is often not possible, not only due to the tight coupling of feature-related functions/codes, but also because the usefulness/necessity of program features is often difficult to determine statically and can vary during runtime. This paper presents DamGate, a framework for dynamic feature customization, allowing vigilant management of program features at runtime to prevent violation of privacy and security policies. At the heart of this technique is the selective placement of checker functions(known as gates) into feature-constituent functions that need to be protected. Through execution gating and feature validation on the fly, DamGate provides differentiated control policy for program features and enables flexible runtime reconfiguration. The proposed framework is prototyped and evaluated using LibreOffice, a large-scale office suit. The evaluation results show that it can achieve desired feature customization with negligible gating overhead.},
	file         = {:home/babak/Documents/feast17.pdf:pdf},
	keywords     = {binary rewriting,de-bloating,feature customization}
}
@book{Rastogi,
	title        = {{Techniques and Tools for Debloating Containers}},
	author       = {Rastogi, Vaibhav and Niddodi, Chaitra and Champaign, Urbana and Mohan, Sibin and Champaign, Urbana and Jha, Somesh and Reps, Tom and Bobba, Rakesh},
	isbn         = {0010000100},
	file         = {:home/babak/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Rastogi et al. - Unknown - Techniques and Tools for Debloating Containers.pdf:pdf}
}
@article{Nilson2013,
	title        = {{BugBox: A Vulnerability Corpus for PHP Web Applications}},
	author       = {Nilson, Gary and Wills, Kent and Stuckman, Jeffrey and Purtilo, James},
	year         = 2013,
	journal      = {6th Workshop on Cyber Security Experimentation and Test},
	url          = {https://www.usenix.org/conference/cset13/workshop-program/presentation/Nilson},
	abstract     = {Web applications are a rich source of vulnerabilities due to their high exposure, diversity, and popularity. Accordingly, web application vulnerabilities are useful subjects for empirical security research. Although some information on vulnerabilities is publicly available, there are no publicly available datasets that couple vulnerabilities with their source code, metadata, and exploits through an executable test environment. We describe BugBox, a corpus and exploit simulation environment for PHP web application vulnerabilities. BugBox provides a test environment and a packaging mechanism that allows for the distribution and sharing of vulnerability data. The goal is to facilitate empirical vulnerability studies, security tool evaluation, and security metrics research. In addition, the framework promotes developer education by demonstrating exploits and providing a sandbox where they can be run safely. BugBox and its modules are open source and available online, and new modules may be contributed by community members.},
	annote       = {https://xdebug.org/},
	file         = {:home/babak/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Nilson et al. - 2013 - BugBox A Vulnerability Corpus for PHP Web Applications.pdf:pdf}
}
@inproceedings{shacham2007geometry,
	title        = {{The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86)}},
	author       = {Shacham, Hovav},
	year         = 2007,
	booktitle    = {Proceedings of the 14th ACM Conference on Computer and Communications Security},
	organization = {ACM}
}
@article{mccabe1976complexity,
	title        = {{A complexity measure}},
	author       = {McCabe, Thomas J},
	year         = 1976,
	journal      = {IEEE Transactions on software Engineering},
	publisher    = {IEEE}
}
@article{Schwarz2018,
	title        = {{JavaScript Zero: Real JavaScript and Zero Side-Channel Attacks}},
	author       = {Schwarz, Michael and Lipp, Moritz and Gruss, Daniel},
	year         = 2018,
	journal      = {NDSS},
	url          = {https://misc0110.net/web/files/jszero.pdf},
	file         = {:home/babak/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Schwarz, Lipp, Gruss - 2018 - JavaScript Zero Real JavaScript and Zero Side-Channel Attacks(2).pdf:pdf}
}
@inproceedings{kurmus2013attack,
	title        = {{Attack Surface Metrics and Automated Compile-Time OS Kernel Tailoring}},
	author       = {Kurmus, Anil and Tartler, Reinhard and Dorneanu, Daniela and Heinloth, Bernhard and Rothberg, Valentin and Ruprecht, Andreas and Schr{\"o}der-Preikschat, Wolfgang and Lohmann, Daniel and Kapitza, R{\"u}diger},
	year         = 2013,
	booktitle    = {Proceedings of Network and Distributed Systems Security (NDSS)}
}
@inproceedings{Kurmus:2011:ASR:1972551.1972557,
	title        = {Attack Surface Reduction for Commodity OS Kernels: Trimmed Garden Plants May Attract Less Bugs},
	author       = {Kurmus, Anil and Sorniotti, Alessandro and Kapitza, R\"{u}diger},
	year         = 2011,
	booktitle    = {Proceedings of the Fourth European Workshop on System Security},
	location     = {Salzburg, Austria},
	series       = {EUROSEC '11},
	isbn         = {978-1-4503-0613-3}
}
@inproceedings{shin2008empirical,
	title        = {{An empirical model to predict security vulnerabilities using code complexity metrics}},
	author       = {Shin, Yonghee and Williams, Laurie},
	year         = 2008,
	booktitle    = {Proceedings of the Second ACM-IEEE international symposium on Empirical software engineering and measurement},
	organization = {ACM}
}
@article{gill1991cyclomatic,
	title        = {{Cyclomatic complexity density and software maintenance productivity}},
	author       = {Gill, Geoffrey K. and Kemerer, Chris F.},
	year         = 1991,
	journal      = {IEEE transactions on software engineering},
	publisher    = {IEEE},
	volume       = 17,
	number       = 12
}
@article{Snyder2017,
	title        = {{Most Websites Don't Need to Vibrate: A Cost-Benefit Approach to Improving Browser Security}},
	author       = {Snyder, Peter and Taylor, Cynthia and Kanich, Chris},
	year         = 2017,
	doi          = {10.1145/3133956.3133966},
	isbn         = 9781450349468,
	url          = {http://arxiv.org/abs/1708.08510},
	abstract     = {Modern web browsers have accrued an incredibly broad set of features since being invented for hypermedia dissemination in 1990. Many of these features benefit users by enabling new types of web applications. However, some features also bring risk to users' privacy and security, whether through implementation error, unexpected composition, or unintended use. Currently there is no general methodology for weighing these costs and benefits. Restricting access to only the features which are necessary for delivering desired functionality on a given website would allow users to enforce the principle of lease privilege on use of the myriad APIs present in the modern web browser. However, security benefits gained by increasing restrictions must be balanced against the risk of breaking existing websites. This work addresses this problem with a methodology for weighing the costs and benefits of giving websites default access to each browser feature. We model the benefit as the number of websites that require the feature for some user-visible benefit, and the cost as the number of CVEs, lines of code, and academic attacks related to the functionality. We then apply this methodology to 74 Web API standards implemented in modern browsers. We find that allowing websites default access to large parts of the Web API poses significant security and privacy risks, with little corresponding benefit. We also introduce a configurable browser extension that allows users to selectively restrict access to low-benefit, high-risk features on a per site basis. We evaluated our extension with two hardened browser configurations, and found that blocking 15 of the 74 standards avoids 52.0{\%} of code paths related to previous CVEs, and 50.0{\%} of implementation code identified by our metric, without affecting the functionality of 94.7{\%} of measured websites.},
	archiveprefix = {arXiv},
	arxivid      = {1708.08510},
	eprint       = {1708.08510},
	file         = {:home/babak/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Snyder, Taylor, Kanich - 2017 - Most Websites Don't Need to Vibrate A Cost-Benefit Approach to Improving Browser Security(2).pdf:pdf},
	keywords     = {2017,acm reference format,and chris kanich,cynthia taylor,most websites don,network security,peter snyder,software security,t,web security and privacy}
}
@inproceedings{heo2018effective,
	title        = {{Effective Program Debloating via Reinforcement Learning}},
	author       = {Heo, Kihong and Lee, Woosuk and Pashakhanloo, Pardis and Naik, Mayur},
	year         = 2018,
	booktitle    = {Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security},
	organization = {ACM}
}
@inproceedings{minesweeper-ccs2018,
	title        = {{MineSweeper: An In-depth Look into Drive-by Cryptocurrency Mining and Its Defense}},
	author       = {Konoth, Radhesh Krishnan and Vineti, Emanuele and Moonsamy, Veelasha and Lindorfer, Martina and Kruegel, Christopher and Bos, Herbert and Vigna, Giovanni},
	year         = 2018,
	booktitle    = {Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security},
	series       = {CCS '18}
}
@inproceedings{cryptojacking-ccs2018,
	title        = {{How You Get Shot in the Back: A Systematical Study About Cryptojacking in the Real World}},
	author       = {Hong, Geng and Yang, Zhemin and Yang, Sen and Zhang, Lei and Nan, Yuhong and Zhang, Zhibo and Yang, Min and Zhang, Yuan and Qian, Zhiyun and Duan, Haixin},
	year         = 2018,
	booktitle    = {Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security},
	series       = {CCS '18}
}
@inproceedings{wang2018seismic,
	title        = {{SEISMIC: SEcure In-lined Script Monitors for Interrupting Cryptojacks}},
	author       = {Wang, Wenhao and Ferrell, Benjamin and Xu, Xiaoyang and Hamlen, Kevin W and Hao, Shuang},
	year         = 2018,
	booktitle    = {European Symposium on Research in Computer Security},
	organization = {Springer}
}
@inproceedings{sun2018perses,
	title        = {{Perses: Syntax-guided Program Reduction}},
	author       = {Sun, Chengnian and Li, Yuanbo and Zhang, Qirun and Gu, Tianxiao and Su, Zhendong},
	year         = 2018,
	booktitle    = {Proceedings of the 40th International Conference on Software Engineering},
	location     = {Gothenburg, Sweden},
	publisher    = {ACM},
	address      = {New York, NY, USA},
	series       = {ICSE '18},
	doi          = {10.1145/3180155.3180236},
	isbn         = {978-1-4503-5638-1},
	url          = {http://doi.acm.org/10.1145/3180155.3180236},
	acmid        = 3180236,
	keywords     = {debugging, delta debugging, program reduction}
}
@inproceedings{regehr2012CReduce,
	title        = {{Test-case Reduction for C Compiler Bugs}},
	author       = {Regehr, John and Chen, Yang and Cuoq, Pascal and Eide, Eric and Ellison, Chucky and Yang, Xuejun},
	year         = 2012,
	booktitle    = {Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation},
	location     = {Beijing, China},
	publisher    = {ACM},
	address      = {New York, NY, USA},
	series       = {PLDI '12},
	doi          = {10.1145/2254064.2254104},
	isbn         = {978-1-4503-1205-9},
	url          = {http://doi.acm.org/10.1145/2254064.2254104},
	acmid        = 2254104,
	keywords     = {automated testing, bug reporting, compiler defect, compiler testing, random testing, test-case minimization}
}
@inproceedings{rastogi2017Cimplifier,
	title        = {{Cimplifier: Automatically Debloating Containers}},
	author       = {Rastogi, Vaibhav and Davidson, Drew and De Carli, Lorenzo and Jha, Somesh and McDaniel, Patrick},
	year         = 2017,
	booktitle    = {Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering},
	location     = {Paderborn, Germany},
	publisher    = {ACM},
	address      = {New York, NY, USA},
	series       = {ESEC/FSE 2017},
	doi          = {10.1145/3106237.3106271},
	isbn         = {978-1-4503-5105-8},
	url          = {http://doi.acm.org/10.1145/3106237.3106271},
	acmid        = 3106271,
	keywords     = {containers, debloating, least privilege, privilege separation}
}
@inproceedings{jiang2018reddroid,
	title        = {{RedDroid: Android Application Redundancy Customization Based on Static Analysis}},
	author       = {Jiang, Yufei and Bao, Qinkun and Wang, Shuai and Liu, Xiao and Wu, Dinghao},
	year         = 2018,
	booktitle    = {Proceedings of the 29th IEEE International Symposium on Software Reliability Engineering (ISSRE’18)}
}
@inproceedings{jiang2016Jred,
	title        = {{JRed: Program Customization and Bloatware Mitigation Based on Static Analysis}},
	author       = {Y. Jiang and D. Wu and P. Liu},
	booktitle    = {2016 IEEE 40th Annual Computer Software and Applications Conference (COMPSAC)},
	volume       = 1,
	number       = {},
	doi          = {10.1109/COMPSAC.2016.146},
	issn         = {0730-3157},
	keywords     = {Java;program diagnostics;security of data;software maintenance;software reliability;source code (software);JRE 6 update 45;garbage collection time;memory footprint;code complexity;Soot framework;Java Runtime Environment;interconnected software security;interconnected software reliability;software system maintenance;redundant code;software engineering;static analysis;bloatware mitigation;program customization;JRed;Java;Libraries;Software;Security;Complexity theory;Runtime;Software reliability;Software Analysis;Static Analysis;Bloatware;Program Customization;Java Runtime Environment}
}
@inproceedings{boomsma2012Dead,
	title        = {{Dead code elimination for web systems written in PHP: Lessons learned from an industry case}},
	author       = {H. Boomsma and B. V. Hostnet and H. Gross},
	year         = 2012,
	month        = {Sept},
	booktitle    = {2012 28th IEEE International Conference on Software Maintenance (ICSM)},
	volume       = {},
	number       = {},
	doi          = {10.1109/ICSM.2012.6405314},
	issn         = {1063-6773},
	keywords     = {authoring languages;Internet;public domain software;software process improvement;source coding;software evolution;unused feature identification;server side scripting languages;dead PHP code identification;dead PHP code detection;dynamic analysis;industry-scale Web system;dead code elimination;Software maintenance;Maintenance engineering;Conferences;Image color analysis;Runtime}
}
@article{zeller2002Delta,
	title        = {{Simplifying and Isolating Failure-Inducing Input}},
	author       = {Zeller, Andreas and Hildebrandt, Ralf},
	year         = 2002,
	month        = feb,
	journal      = {IEEE Trans. Softw. Eng.},
	publisher    = {IEEE Press},
	address      = {Piscataway, NJ, USA},
	volume       = 28,
	number       = 2,
	doi          = {10.1109/32.988498},
	issn         = {0098-5589},
	url          = {http://dx.doi.org/10.1109/32.988498},
	issue_date   = {February 2002},
	acmid        = 506206,
	keywords     = {Automated debugging, debugging aids, testing tools, combinatorial testing, diagnostics, tracing.}
}
@inproceedings{snyder2017vibrate,
	title        = {{Most Websites Don'T Need to Vibrate: A Cost-Benefit Approach to Improving Browser Security}},
	author       = {Snyder, Peter and Taylor, Cynthia and Kanich, Chris},
	year         = 2017,
	booktitle    = {Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
	location     = {Dallas, Texas, USA},
	publisher    = {ACM},
	address      = {New York, NY, USA},
	series       = {CCS '17},
	doi          = {10.1145/3133956.3133966},
	isbn         = {978-1-4503-4946-8},
	url          = {http://doi.acm.org/10.1145/3133956.3133966},
	acmid        = 3133966,
	keywords     = {browser security, software security, web security and privacy}
}
@inproceedings{vangoethem2015timing,
	title        = {{The Clock is Still Ticking: Timing Attacks in the Modern Web}},
	author       = {Tom Van Goethem and Wouter Joosen and Nick Nikiforakis},
	year         = 2015,
	booktitle    = {Proceedings of the 22nd ACM Conference on Computer and Communications Security (CCS)}
}
@inproceedings{brumley2003timing,
	title        = {{Remote Timing Attacks Are Practical}},
	author       = {Brumley, David and Boneh, Dan},
	year         = 2003,
	booktitle    = {Proceedings of the 12th Conference on USENIX Security Symposium - Volume 12},
	location     = {Washington, DC},
	publisher    = {USENIX Association},
	address      = {Berkeley, CA, USA},
	series       = {SSYM'03},
	url          = {http://dl.acm.org/citation.cfm?id=1251353.1251354},
	acmid        = 1251354
}
@inproceedings{brumley2013timing,
	title        = {{Remote Timing Attacks Are Still Practical}},
	author       = {Brumley, Billy Bob and Tuveri, Nicola},
	year         = 2011,
	booktitle    = {Computer Security -- ESORICS 2011},
	publisher    = {Springer Berlin Heidelberg},
	address      = {Berlin, Heidelberg},
	isbn         = {978-3-642-23822-2},
	editor       = {Atluri, Vijay and Diaz, Claudia},
	abstract     = {For over two decades, timing attacks have been an active area of research within applied cryptography. These attacks exploit cryptosystem or protocol implementations that do not run in constant time. When implementing an elliptic curve cryptosystem with a goal to provide side-channel resistance, the scalar multiplication routine is a critical component. In such instances, one attractive method often suggested in the literature is Montgomery's ladder that performs a fixed sequence of curve and field operations. This paper describes a timing attack vulnerability in OpenSSL's ladder implementation for curves over binary fields. We use this vulnerability to steal the private key of a TLS server where the server authenticates with ECDSA signatures. Using the timing of the exchanged messages, the messages themselves, and the signatures, we mount a lattice attack that recovers the private key. Finally, we describe and implement an effective countermeasure.}
}
@inproceedings{halfond2006classification,
	title        = {{A classification of SQL-injection attacks and countermeasures}},
	author       = {Halfond, William G and Viegas, Jeremy and Orso, Alessandro and others},
	year         = 2006,
	booktitle    = {Proceedings of the IEEE International Symposium on Secure Software Engineering},
	volume       = {},
	organization = {IEEE}
}
@inproceedings{jovanovic2006preventing,
	title        = {{Preventing cross site request forgery attacks}},
	author       = {Jovanovic, Nenad and Kirda, Engin and Kruegel, Christopher},
	year         = 2006,
	booktitle    = {Securecomm and Workshops},
	organization = {IEEE}
}
@inproceedings{barth2008csrf,
	title        = {{Robust Defenses for Cross-site Request Forgery}},
	author       = {Barth, Adam and Jackson, Collin and Mitchell, John C.},
	year         = 2008,
	booktitle    = {Proceedings of the 15th ACM Conference on Computer and Communications Security},
	location     = {Alexandria, Virginia, USA},
	publisher    = {ACM},
	address      = {NY, USA},
	series       = {CCS},
	doi          = {10.1145/1455770.1455782},
	isbn         = {978-1-59593-810-7},
	url          = {http://doi.acm.org/10.1145/1455770.1455782},
	acmid        = 1455782,
	keywords     = {cross-site request forgery, http referer header, same-origin policy, web application firewall}
}
@inproceedings{bates2010regular,
	title        = {{Regular expressions considered harmful in client-side XSS filters}},
	author       = {Bates, Daniel and Barth, Adam and Jackson, Collin},
	year         = 2010,
	booktitle    = {Proceedings of the 19th international conference on World wide web},
	organization = {ACM}
}
@inproceedings{naderi2019malmax,
	title        = {Malmax: Multi-aspect execution for automated dynamic web server malware analysis},
	author       = {Naderi-Afooshteh, Abbas and Kwon, Yonghwi and Nguyen-Tuong, Anh and Razmjoo-Qalaei, Ali and Zamiri-Gourabi, Mohammad-Reza and Davidson, Jack W},
	year         = 2019,
	booktitle    = {Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security},
	pages        = {1849--1866}
}
@inproceedings{kirda2006noxes,
	title        = {{Noxes: A Client-side Solution for Mitigating Cross-site Scripting Attacks}},
	author       = {Kirda, Engin and Kruegel, Christopher and Vigna, Giovanni and Jovanovic, Nenad},
	year         = 2006,
	booktitle    = {Proceedings of the 2006 ACM Symposium on Applied Computing},
	location     = {Dijon, France},
	publisher    = {ACM},
	address      = {New York, NY, USA},
	series       = {SAC '06},
	doi          = {10.1145/1141277.1141357},
	isbn         = {1-59593-108-2},
	url          = {http://doi.acm.org/10.1145/1141277.1141357},
	acmid        = 1141357
}
@inproceedings{vogt2007cross,
	title        = {{Cross Site Scripting Prevention with Dynamic Data Tainting and Static Analysis}},
	author       = {Vogt, Philipp and Nentwich, Florian and Jovanovic, Nenad and Kirda, Engin and Kruegel, Christopher and Vigna, Giovanni},
	year         = 2007,
	booktitle    = {NDSS},
	volume       = 2007
}
@misc{wordpressPlugin,
	title        = {{WordPress sites under attack via zero-day in abandoned plugin | ZDNet}},
	year         = 2019,
	howpublished = {\url{https://www.zdnet.com/article/wordpress-sites-under-attack-via-zero-day-in-abandoned-plugin/}}
}
@misc{wordpress,
	title        = {{WordPress: OpenSource Content Management System}},
	key          = {wordpress},
	howpublished = {\url{https://wordpress.com/}}
}
@inproceedings{cadar2008klee,
	title        = {Klee: unassisted and automatic generation of high-coverage tests for complex systems programs.},
	author       = {Cadar, Cristian and Dunbar, Daniel and Engler, Dawson R and others},
	year         = 2008,
	booktitle    = {OSDI},
	volume       = 8,
	pages        = {209--224}
}
@inproceedings{schwartz2015conflict,
	title        = {Conflict-directed graph coverage},
	author       = {Schwartz-Narbonne, Daniel and Sch{\"a}f, Martin and Jovanovi{\'c}, Dejan and R{\"u}mmer, Philipp and Wies, Thomas},
	year         = 2015,
	booktitle    = {NASA Formal Methods Symposium},
	pages        = {327--342},
	organization = {Springer}
}
@article{godefroid2012sage,
	title        = {SAGE: whitebox fuzzing for security testing},
	author       = {Godefroid, Patrice and Levin, Michael Y and Molnar, David},
	year         = 2012,
	journal      = {Communications of the ACM},
	publisher    = {ACM New York, NY, USA},
	volume       = 55,
	number       = 3,
	pages        = {40--44}
}
@inproceedings{boonstoppel2008rwset,
	title        = {RWset: Attacking path explosion in constraint-based test generation},
	author       = {Boonstoppel, Peter and Cadar, Cristian and Engler, Dawson},
	year         = 2008,
	booktitle    = {International conference on Tools and Algorithms for the Construction and Analysis of Systems},
	pages        = {351--366},
	organization = {Springer}
}
@inproceedings{hansen2009state,
	title        = {State joining and splitting for the symbolic execution of binaries},
	author       = {Hansen, Trevor and Schachte, Peter and S{\o}ndergaard, Harald},
	year         = 2009,
	booktitle    = {International Workshop on Runtime Verification},
	pages        = {76--92},
	organization = {Springer}
}
@inproceedings{xie2016proteus,
	title        = {Proteus: Computing disjunctive loop summary via path dependency analysis},
	author       = {Xie, Xiaofei and Chen, Bihuan and Liu, Yang and Le, Wei and Li, Xiaohong},
	year         = 2016,
	booktitle    = {Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
	pages        = {61--72}
}
@inproceedings{godefroid2011automatic,
	title        = {Automatic partial loop summarization in dynamic test generation},
	author       = {Godefroid, Patrice and Luchaup, Daniel},
	year         = 2011,
	booktitle    = {Proceedings of the 2011 International Symposium on Software Testing and Analysis},
	pages        = {23--33}
}
@inproceedings{godefroid2007compositional,
	title        = {Compositional dynamic test generation},
	author       = {Godefroid, Patrice},
	year         = 2007,
	booktitle    = {Proceedings of the 34th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
	pages        = {47--54}
}
@inproceedings{yun2018qsym,
	title        = {$\{$QSYM$\}$: A practical concolic execution engine tailored for hybrid fuzzing},
	author       = {Yun, Insu and Lee, Sangho and Xu, Meng and Jang, Yeongjin and Kim, Taesoo},
	year         = 2018,
	booktitle    = {27th USENIX Security Symposium (USENIX Security 18)},
	pages        = {745--761}
}
@phdthesis{cheng2016binary,
	title        = {Binary Analysis and Symbolic Execution with angr},
	author       = {Cheng, Eric},
	year         = 2016,
	school       = {PhD thesis, The MITRE Corporation}
}
@inproceedings{poeplau2019systematic,
	title        = {Systematic comparison of symbolic execution systems: intermediate representation and its generation},
	author       = {Poeplau, Sebastian and Francillon, Aur{\'e}lien},
	year         = 2019,
	booktitle    = {Proceedings of the 35th Annual Computer Security Applications Conference},
	pages        = {163--176}
}
@article{sen2005cute,
	title        = {CUTE: A concolic unit testing engine for C},
	author       = {Sen, Koushik and Marinov, Darko and Agha, Gul},
	year         = 2005,
	journal      = {ACM SIGSOFT Software Engineering Notes},
	publisher    = {ACM New York, NY, USA},
	volume       = 30,
	number       = 5,
	pages        = {263--272}
}
@inproceedings{naderi2019cubismo,
	title        = {Cubismo: Decloaking server-side malware via cubist program analysis},
	author       = {Naderi-Afooshteh, Abbas and Kwon, Yonghwi and Nguyen-Tuong, Anh and Bagheri-Marzijarani, Mandana and Davidson, Jack W},
	year         = 2019,
	booktitle    = {Proceedings of the 35th Annual Computer Security Applications Conference},
	pages        = {430--443}
}
@article{avgerinos2014automatic,
	title        = {Automatic exploit generation},
	author       = {Avgerinos, Thanassis and Cha, Sang Kil and Rebert, Alexandre and Schwartz, Edward J and Woo, Maverick and Brumley, David},
	year         = 2014,
	journal      = {Communications of the ACM},
	publisher    = {ACM New York, NY, USA},
	volume       = 57,
	number       = 2,
	pages        = {74--84}
}
@article{cadar2008exe,
	title        = {EXE: Automatically generating inputs of death},
	author       = {Cadar, Cristian and Ganesh, Vijay and Pawlowski, Peter M and Dill, David L and Engler, Dawson R},
	year         = 2008,
	journal      = {ACM Transactions on Information and System Security (TISSEC)},
	publisher    = {ACM New York, NY, USA},
	volume       = 12,
	number       = 2,
	pages        = {1--38}
}
@inproceedings{cha2012unleashing,
	title        = {Unleashing mayhem on binary code},
	author       = {Cha, Sang Kil and Avgerinos, Thanassis and Rebert, Alexandre and Brumley, David},
	year         = 2012,
	booktitle    = {2012 IEEE Symposium on Security and Privacy},
	pages        = {380--394},
	organization = {IEEE}
}
@article{chipounov2011s2e,
	title        = {S2E: A platform for in-vivo multi-path analysis of software systems},
	author       = {Chipounov, Vitaly and Kuznetsov, Volodymyr and Candea, George},
	year         = 2011,
	journal      = {Acm Sigplan Notices},
	publisher    = {ACM New York, NY, USA},
	volume       = 46,
	number       = 3,
	pages        = {265--278}
}
@inproceedings{lessismore,
	title        = {Less is more: quantifying the security benefits of debloating web applications},
	author       = {Azad, Babak Amin and Laperdrix, Pierre and Nikiforakis, Nick},
	year         = 2019,
	booktitle    = {Proceedings of the 28th USENIX Security Symposium}
}
@inproceedings{doupe2011fear,
	title        = {Fear the EAR: Discovering and mitigating execution after redirect vulnerabilities},
	author       = {Doup{\'e}, Adam and Boe, Bryce and Kruegel, Christopher and Vigna, Giovanni},
	year         = 2011,
	booktitle    = {Proceedings of the 18th ACM conference on Computer and communications security}
}
@book{scalability-book,
	title        = {Web Scalability for Startup Engineers},
	author       = {Artur Ejsmont},
	year         = 2015,
	publisher    = {McGraw-Hill Education}
}
@article{fratric2012ropguard,
	title        = {ROPGuard: Runtime prevention of return-oriented programming attacks},
	author       = {Fratri{\'c}, Ivan},
	year         = 2012,
	journal      = {Technical report}
}
@inproceedings{alhuzali2018navex,
	title        = {$\{$NAVEX$\}$: Precise and scalable exploit generation for dynamic web applications},
	author       = {Alhuzali, Abeer and Gjomemo, Rigel and Eshete, Birhanu and Venkatakrishnan, VN},
	year         = 2018,
	booktitle    = {27th USENIX Security Symposium (USENIX Security 18)},
	pages        = {377--392}
}
@inproceedings{jensen2012thaps,
	title        = {Thaps: automated vulnerability scanning of php applications},
	author       = {Jensen, Torben and Pedersen, Heine and Olesen, Mads Chr and Hansen, Ren{\'e} Rydhof},
	year         = 2012,
	booktitle    = {Nordic conference on secure IT systems},
	pages        = {31--46},
	organization = {Springer}
}
@inproceedings{barron2021click,
	title        = {Click This, Not That: Extending Web Authentication with Deception},
	author       = {Barron, Timothy and So, Johnny and Nikiforakis, Nick},
	year         = 2021,
	booktitle    = {Proceedings of the 2021 ACM Asia Conference on Computer and Communications Security},
	pages        = {462--474}
}
@inproceedings{makiou2014improving,
	title        = {Improving Web Application Firewalls to detect advanced SQL injection attacks},
	author       = {Makiou, Abdelhamid and Begriche, Youcef and Serhrouchni, Ahmed},
	year         = 2014,
	booktitle    = {2014 10th International Conference on Information Assurance and Security},
	pages        = {35--40},
	organization = {IEEE}
}
@article{pappas2012kbouncer,
	title        = {kBouncer: Efficient and transparent ROP mitigation},
	author       = {Pappas, Vasilis},
	year         = 2012,
	journal      = {Apr}
}
@inproceedings{dahse2010rips,
	title        = {RIPS-A static source code analyser for vulnerabilities in PHP scripts},
	author       = {Dahse, Johannes and Schwenk, J{\"o}rg},
	year         = 2010,
	booktitle    = {Seminar Work (Seminer {\c{C}}alismasi). Horst G{\"o}rtz Institute Ruhr-University Bochum}
}
@book{kaufman2009finding,
	title        = {Finding groups in data: an introduction to cluster analysis},
	author       = {Kaufman, Leonard and Rousseeuw, Peter J},
	year         = 2009,
	publisher    = {John Wiley \& Sons},
	volume       = 344
}
@misc{openresty,
	title        = {OpenResty: Scalable Web Platform by Extending NGINX with Lua},
	author       = {OpenResty},
	year         = 2021,
	url          = {https://openresty.org/en/}
}
@misc{PHPGGC,
	title        = {PHPGGC: PHP Generic Gadget Chains},
	author       = {Ambionics Security},
	year         = 2017,
	url          = {https://github.com/ambionics/phpggc}
}
@misc{upwork,
	title        = {Upwork: The marketplace for freelancers},
	author       = {Upwork},
	year         = 2021,
	url          = {https://upwork.com}
}
@misc{fiverr,
	title        = {Fiverr: The world's largest marketplace for digital services},
	author       = {Fiverr},
	year         = 2021,
	url          = {https://fiverr.com}
}
@misc{websitestatistics,
	title        = {Statistica: How many websites are there?},
	author       = {Statistica},
	year         = 2021,
	url          = {https://www.statista.com/chart/19058/number-of-websites-online/}
}
@misc{packagiststats,
	title        = {Packagist: The PHP Package Repository},
	author       = {Packagist},
	year         = 2021,
	url          = {https://packagist.org/statistics}
}
@inproceedings{ispoglou2018block,
	title        = {Block oriented programming: Automating data-only attacks},
	author       = {Ispoglou, Kyriakos K and AlBassam, Bader and Jaeger, Trent and Payer, Mathias},
	year         = 2018,
	booktitle    = {Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security},
	pages        = {1868--1882}
}
@misc{npmstatistics,
	title        = {NPM: Node Package Manager Statistics},
	author       = {NPM},
	year         = 2021,
	url          = {https://blog.npmjs.org/post/615388323067854848/so-long-and-thanks-for-all-the-packages.html}
}
@misc{pypi,
	title        = {PyPI Package Download Statistics},
	author       = {PyPI},
	year         = 2021,
	url          = {https://pypistats.org/top}
}
@misc{twitterviphack,
	title        = {A Brazen Online Attack Targets V.I.P. Twitter Users in a Bitcoin Scam},
	author       = {The New York times},
	year         = 2020,
	url          = {https://www.nytimes.com/2020/07/15/technology/twitter-hack-bill-gates-elon-musk.html}
}
@misc{oktahack,
	title        = {Okta hack puts thousands of businesses on high alert},
	author       = {The Verge},
	year         = 2021,
	url          = {https://www.theverge.com/2022/3/22/22990637/okta-breach-single-sign-on-lapsus-hacker-group}
}
@misc{popularphp,
	title        = {Packagist: Popular PHP Packages},
	author       = {Packagist},
	year         = 2021,
	url          = {https://packagist.org/explore/popular}
}
@misc{wpfilemanager,
	title        = {WordPress File Manager Plugin Unauthenticated RCE Exploit},
	author       = {Pawan Jaiswal},
	year         = 2021,
	url          = {https://medium.com/swlh/wordpress-file-manager-plugin-exploit-for-unauthenticated-rce-8053db3512ac}
}
@inproceedings{saphire,
	title        = {Saphire: Sandboxing {PHP} Applications with Tailored System Call Allowlists},
	author       = {Alexander Bulekov and Rasoul Jahanshahi and Manuel Egele},
	year         = 2021,
	booktitle    = {Proceedings of the 30th USENIX Security Symposium},
	isbn         = {978-1-939133-24-3},
	url          = {https://www.usenix.org/conference/usenixsecurity21/presentation/bulekov}
}
@inproceedings{mininode,
	title        = {Mininode: Reducing the Attack Surface of Node.js Applications},
	author       = {Koishybayev, Igibek and Kapravelos, Alexandros},
	year         = 2020,
	month        = oct,
	booktitle    = {Proceedings of the International Symposium on Research in Attacks, Intrusions and Defenses (RAID)},
	howpublished = {/projects/mininode/},
	tag          = {mininode}
}
@article{dalton2009nemesis,
	title        = {Nemesis: Preventing Authentication \& [and] Access Control Vulnerabilities in Web Applications},
	author       = {Dalton, Michael and Kozyrakis, Christos and Zeldovich, Nickolai},
	year         = 2009
}
@inproceedings{259711,
	title        = {Confine: Automated System Call Policy Generation for Container Attack Surface Reduction},
	author       = {Seyedhamed Ghavamnia and Tapti Palit and Azzedine Benameur and Michalis Polychronakis},
	year         = 2020,
	booktitle    = {23rd International Symposium on Research in Attacks, Intrusions and Defenses}
}
@inproceedings{abubakar2021shard,
	title        = {$SHARD$: Fine-Grained Kernel Specialization with Context-Aware Hardening},
	author       = {Abubakar, Muhammad and Ahmad, Adil and Fonseca, Pedro and Xu, Dongyan},
	year         = 2021,
	booktitle    = {Proceedings of the 30th USENIX Security Symposium}
}
@inproceedings{snyder2017most,
	title        = {Most websites don't need to vibrate: A cost-benefit approach to improving browser security},
	author       = {Snyder, Peter and Taylor, Cynthia and Kanich, Chris},
	year         = 2017,
	booktitle    = {Proceedings of the ACM SIGSAC Conference on Computer and Communications Security}
}
}
@inproceedings{qian2020slimium,
	title        = {Slimium: Debloating the Chromium Browser with Feature Subsetting},
	author       = {Qian, Chenxiong and Koo, Hyungjoon and Oh, ChangSeok and Kim, Taesoo and Lee, Wenke},
	year         = 2020,
	booktitle    = {Proceedings of the ACM SIGSAC Conference on Computer and Communications Security}
}
@inproceedings{vasilakis2018breakapp,
	title        = {BreakApp: Automated, Flexible Application Compartmentalization.},
	author       = {Vasilakis, Nikos and Karel, Ben and Roessler, Nick and Dautenhahn, Nathan and DeHon, Andr{\'e} and Smith, Jonathan M},
	year         = 2018,
	booktitle    = {NDSS}
}
@inproceedings{jovanovic2006pixy,
	title        = {Pixy: A static analysis tool for detecting web application vulnerabilities},
	author       = {Jovanovic, Nenad and Kruegel, Christopher and Kirda, Engin},
	year         = 2006,
	booktitle    = {2006 IEEE Symposium on Security and Privacy (S\&P'06)},
	pages        = {6--pp},
	organization = {IEEE}
}
@inproceedings{ghavamnia2020temporal,
	title        = {Temporal system call specialization for attack surface reduction},
	author       = {Ghavamnia, Seyedhamed and Palit, Tapti and Mishra, Shachee and Polychronakis, Michalis},
	year         = 2020,
	booktitle    = {Proceedings of the 29th USENIX Security Symposium}
}
@inproceedings{mishra2020saffire,
	title        = {Saffire: Context-sensitive Function Specialization and Hardening against Code Reuse Attacks},
	author       = {Mishra, Shachee and Polychronakis, Michalis},
	year         = 2020,
	booktitle    = {IEEE European Symposium on Security \& Privacy}
}
@inproceedings{mishra2018shredder,
	title        = {Shredder: Breaking exploits through API specialization},
	author       = {Mishra, Shachee and Polychronakis, Michalis},
	year         = 2018,
	booktitle    = {Proceedings of the 34th Annual Computer Security Applications Conference}
}
@article{king1976symbolic,
	title        = {Symbolic execution and program testing},
	author       = {King, James C},
	year         = 1976,
	journal      = {Communications of the ACM},
	publisher    = {ACM New York, NY, USA},
	volume       = 19,
	number       = 7,
	pages        = {385--394}
}
@inproceedings{mishra2021sgxpecial,
	title        = {SGXPecial: Specializing SGX Interfaces against Code Reuse Attacks},
	author       = {Mishra, Shachee and Polychronakis, Michalis},
	year         = 2021,
	booktitle    = {Proceedings of the 14th European Workshop on Systems Security}
}
@inproceedings{koo2019configuration,
	title        = {Configuration-driven software debloating},
	author       = {Koo, Hyungjoon and Ghavamnia, Seyedhamed and Polychronakis, Michalis},
	year         = 2019,
	booktitle    = {Proceedings of the 12th European Workshop on Systems Security}
}
@inproceedings{jahanshahi2020you,
	title        = {You shall not pass: Mitigating sql injection attacks on legacy web applications},
	author       = {Jahanshahi, Rasoul and Doup{\'e}, Adam and Egele, Manuel},
	year         = 2020,
	booktitle    = {Proceedings of the 15th ACM Asia Conference on Computer and Communications Security}
}
@inproceedings{7582754,
	title        = {Finding access control bugs in web applications with CanCheck},
	author       = {Bocić, Ivan and Bultan, Tevfik},
	year         = 2016,
	booktitle    = {2016 31st IEEE/ACM International Conference on Automated Software Engineering (ASE)},
	volume       = {},
	number       = {},
	doi          = {}
}
@inproceedings{son2013fix,
	title        = {Fix Me Up: Repairing Access-Control Bugs in Web Applications.},
	author       = {Son, Sooel and McKinley, Kathryn S and Shmatikov, Vitaly},
	year         = 2013,
	booktitle    = {NDSS},
	organization = {Citeseer}
}
@article{zeller2002simplifying,
	title        = {Simplifying and isolating failure-inducing input},
	author       = {Zeller, Andreas and Hildebrandt, Ralf},
	year         = 2002,
	journal      = {IEEE Transactions on Software Engineering},
	publisher    = {IEEE},
	volume       = 28,
	number       = 2
}
@inproceedings{255308,
	title        = {Temporal System Call Specialization for Attack Surface Reduction},
	author       = {Seyedhamed Ghavamnia and Tapti Palit and Shachee Mishra and Michalis Polychronakis},
	year         = 2020,
	booktitle    = {Proceedings of the 29th USENIX Security Symposium},
	isbn         = {978-1-939133-17-5},
	url          = {https://www.usenix.org/conference/usenixsecurity20/presentation/ghavamnia}
}
@article{Einstein,
	title        = {{Zur Elektrodynamik bewegter K{\"o}rper}. ({German}) [{On} the electrodynamics of moving bodies]},
	author       = {Albert Einstein},
	year         = 1905,
	journal      = {Annalen der Physik},
	volume       = 322,
	number       = 10,
	pages        = {891--921},
	doi          = {http://dx.doi.org/10.1002/andp.19053221004}
}
@misc{popov,
	title        = {PHP-parser},
	author       = {Popov, Nikita},
	howpublished = {\url{https://github.com/nikic/PHP-Parser/tree/master/lib/PhpParser/Node}}
}
@misc{zapproxy,
	title        = {OWASP ZAP Proxy},
	author       = {OWASP},
	howpublished = {\url{https://www.zaproxy.org/}}
}
@misc{phpdatabaseapis,
	title        = {PHP Database Drivers and Plugin APIs},
	author       = {PHP},
	howpublished = {\url{https://www.php.net/manual/en/set.mysqlinfo.php}}
}
@inproceedings{azad2019less,
	title        = {Less is more: Quantifying the security benefits of debloating web applications},
	author       = {Azad, Babak Amin and Laperdrix, Pierre and Nikiforakis, Nick},
	year         = 2019,
	booktitle    = {28th $\{$USENIX$\}$ Security Symposium ($\{$USENIX$\}$ Security 19)},
	pages        = {1697--1714}
}
@article{cadar2008exe,
	title        = {EXE: Automatically generating inputs of death},
	author       = {Cadar, Cristian and Ganesh, Vijay and Pawlowski, Peter M and Dill, David L and Engler, Dawson R},
	year         = 2008,
	journal      = {ACM Transactions on Information and System Security (TISSEC)},
	publisher    = {ACM New York, NY, USA},
	volume       = 12,
	number       = 2,
	pages        = {1--38}
}
@inproceedings{chipounov2009selective,
	title        = {Selective symbolic execution},
	author       = {Chipounov, Vitaly and Georgescu, Vlad and Zamfir, Cristian and Candea, George},
	year         = 2009,
	booktitle    = {Proceedings of the 5th Workshop on Hot Topics in System Dependability (HotDep)}
}
@inproceedings{huang2019uchecker,
	title        = {UChecker: Automatically detecting php-based unrestricted file upload vulnerabilities},
	author       = {Huang, Jin and Li, Yu and Zhang, Junjie and Dai, Rui},
	year         = 2019,
	booktitle    = {2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)},
	pages        = {581--592},
	organization = {IEEE}
}
@phdthesis{anand2012techniques,
	title        = {Techniques to facilitate symbolic execution of real-world programs},
	author       = {Anand, Saswat},
	year         = 2012,
	school       = {Georgia Institute of Technology}
}
@inproceedings{godefroid2005dart,
	title        = {DART: Directed automated random testing},
	author       = {Godefroid, Patrice and Klarlund, Nils and Sen, Koushik},
	year         = 2005,
	booktitle    = {Proceedings of the 2005 ACM SIGPLAN conference on Programming language design and implementation},
	pages        = {213--223}
}
@inproceedings{ma2011directed,
	title        = {Directed symbolic execution},
	author       = {Ma, Kin-Keung and Phang, Khoo Yit and Foster, Jeffrey S and Hicks, Michael},
	year         = 2011,
	booktitle    = {International Static Analysis Symposium},
	pages        = {95--111},
	organization = {Springer}
}
@article{SurveySymExec-CSUR18,
	title        = {A Survey of Symbolic Execution Techniques},
	author       = {Baldoni, Roberto and Coppa, Emilio and D'Elia, Daniele Cono and Demetrescu, Camil and Finocchi, Irene},
	year         = 2018,
	journal      = {ACM Comput. Surv.},
	publisher    = {ACM},
	address      = {New York, NY, USA},
	volume       = 51,
	number       = 3,
	articleno    = 50
}
@inproceedings{bulekov2021saphire,
	title        = {Saphire: Sandboxing $\{$PHP$\}$ Applications with Tailored System Call Allowlists},
	author       = {Bulekov, Alexander and Jahanshahi, Rasoul and Egele, Manuel},
	year         = 2021,
	booktitle    = {30th USENIX Security Symposium (USENIX Security 21)},
	pages        = {2881--2898}
}
@misc{wpstatsbuildwith,
	title        = {WordPress Usage Statistics},
	author       = {BuildWithStats},
	year         = 2022,
	howpublished = {\url{https://trends.builtwith.com/cms/WordPress}}
}
@misc{wpstatsw3techs,
	title        = {Usage statistics and market share of WordPress},
	author       = {W3Tech},
	year         = 2022,
	howpublished = {\url{https://w3techs.com/technologies/details/cm-wordpress}}
}
@misc{w3techphp,
	title        = {Usage statistics of PHP for websites},
	author       = {W3Tech},
	year         = 2022,
	howpublished = {\url{https://w3techs.com/technologies/details/pl-php}}
}
@article{Mishra2018,
	title        = {Shredder: Breaking Exploits through API Specialization},
	author       = {Shachee Mishra and Michalis Polychronakis},
	year         = 2018,
	journal      = {Annual Computer Security Applications Conference (ACSAC)},
	pages        = {1--16},
	isbn         = 9781450365697,
	abstract     = {Code reuse attacks have been a threat to software security since the introduction of non-executable memory protections. Despite significant advances in various types of additional defenses, such as control flow integrity (CFI) and leakage-resilient code randomization, recent code reuse attacks have demonstrated that these defenses are often not enough to prevent successful exploitation. Sophisticated exploits can reuse code comprising larger code fragments that conform to the enforced CFI policy and which are not affected by randomization. As a step towards improving our defenses against code reuse attacks, in this paper we present Shredder, a defense-in-depth exploit mitigation tool for the protection of closed-source applications. In a preprocessing phase, Shredder statically analyzes a given application to pinpoint the call sites of potentially useful (to attackers) system API functions, and uses backwards data flow analysis to derive their expected argument values and generate whitelisting policies in a best-effort way. At runtime, using library interposition, Shredder exposes to the protected application only specialized versions of these critical API functions, and blocks any invocation that violates the enforced policy. We have experimentally evaluated our prototype implementation for Windows programs using a large set of 251 shellcode and 30 code reuse samples, and show that it improves significantly upon code stripping, a state-of-the-art code surface reduction technique, by blocking a larger number of malicious payloads with negligible runtime overhead.}
}
@article{altestability,
	title        = {Testability Tarpits: the Impact of Code Patterns on the Security Testing of Web Applications},
	author       = {Al Kassar, Feras and Clerici, Giulia and Compagna, Luca and Yamaguchi, Fabian and Balzarotti, Davide}
}
@inproceedings{10.1145/1081706.1081750,
	title        = {CUTE: A Concolic Unit Testing Engine for C},
	author       = {Sen, Koushik and Marinov, Darko and Agha, Gul},
	year         = 2005,
	booktitle    = {Proceedings of the 10th European Software Engineering Conference Held Jointly with 13th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
	location     = {Lisbon, Portugal},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	series       = {ESEC/FSE-13},
	pages        = {263–272},
	doi          = {10.1145/1081706.1081750},
	isbn         = 1595930140,
	url          = {https://doi.org/10.1145/1081706.1081750},
	numpages     = 10
}
@inproceedings{redini2019b,
	title        = {Bintrimmer: Towards static binary debloating through abstract interpretation},
	author       = {Redini, Nilo and Wang, Ruoyu and Machiry, Aravind and Shoshitaishvili, Yan and Vigna, Giovanni and Kruegel, Christopher},
	year         = 2019,
	booktitle    = {International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment}
}
@article{goodestimator,
	title        = {{THE POPULATION FREQUENCIES OF SPECIES AND THE ESTIMATION OF POPULATION PARAMETERS}},
	author       = {GOOD, I. J.},
	year         = 1953,
	month        = 12,
	journal      = {Biometrika},
	volume       = 40,
	number       = {3-4},
	pages        = {237--264},
	doi          = {10.1093/biomet/40.3-4.237},
	issn         = {0006-3444},
	url          = {https://doi.org/10.1093/biomet/40.3-4.237},
	abstract     = {{A random sample is drawn from a population of animals of various species. (The theory may also be applied to studies of literary vocabulary, for example.) If a particular species is represented r times in the sample of size N, then r/N is not a good estimate of the population frequency, p, when r is small. Methods are given for estimating p, assuming virtually nothing about the underlying population. The estimates are expressed in terms of smoothed values of the numbers nr (r= 1, 2, 3, ...), where nr is the number of distinct species that are each represented r times in the sample. (nr may be described as ‘the frequency of the frequency r’.) Turing is acknowledged for the most interesting formula in this part of the work. An estimate of the proportion of the population represented by the species occurring in the sample is an immediate corollary. Estimates are made of measures of heterogeneity of the population, including Yule's ‘characteristic’ and Shannon's ‘entropy’. Methods are then discussed that do depend on assumptions about the underlying population. It is here that most work has been done by other writers. It is pointed out that a hypothesis can give a good fit to the numbers nr but can give quite the wrong value for Yule's characteristic. An example of this is Fisher's fit to some data of Williams's on Macrolepidoptera.}},
	eprint       = {https://academic.oup.com/biomet/article-pdf/40/3-4/237/492571/40-3-4-237.pdf}
}
@article{Huang2019,
	title        = {UChecker: Automatically Detecting PHP-Based Unrestricted File Upload Vulnerabilities},
	author       = {Jin Huang and Yu Li and Junjie Zhang and Rui Dai},
	year         = 2019,
	journal      = {Proceedings - 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, DSN 2019},
	pages        = {581--592},
	doi          = {10.1109/DSN.2019.00064},
	isbn         = 9781728100562,
	abstract     = {Unrestricted file upload vulnerabilities enable attackers to upload and execute malicious scripts in web servers. We have built a system, namely UChecker, to effectively and automatically detect such vulnerabilities in PHP server-side web applications. Towards this end, UChecker first interprets abstract syntax trees (AST) of program source code to perform symbolic execution. It then models vulnerabilities using SMT constraints and further leverages an SMT solver to verify the satisfiability of these constraints. UChecker features a novel vulnerability-oriented locality analysis algorithm to reduce the workload of symbolic execution, an AST-driven symbolic execution engine with compact data structures, and rules to translate PHP-based constraints into SMT-based constraints by mitigating their semantic gaps. Experiments based on real-world examples have demonstrated that UChecker has accomplished a high detection accuracy. In addition, it detected three vulnerable PHP scripts that are previously unknown.},
	keywords     = {detection,program analysis,symbolic execution,vulnerability,web security}
}
@article{Huang2018,
	title        = {Building an Abstract-Syntax-Tree-Oriented Symbolic Execution Engine for PHP Programs Building An Abstract-Syntax-Tree-Oriented Symbolic Execution Engine for PHP Programs A thesis submitted in partial fulfillment},
	author       = {Jin Huang},
	year         = 2018,
	keywords     = {Department of Computer Science and Engineering,PHP,abstract syntax tree,programming,symbolic execution engine}
}
@article{Chaudhuri2010,
	title        = {Symbolic security analysis of ruby-on-rails web applications},
	author       = {Avik Chaudhuri and Jeffrey S. Foster},
	year         = 2010,
	pages        = 585,
	doi          = {10.1145/1866307.1866373},
	isbn         = 9781450302449,
	abstract     = {Many of today's web applications are built on frameworks that in- clude sophisticated defenses against malicious adversaries. How- ever, mistakes in the way developers deploy those defenses could leave applications open to attack. To address this issue, we intro- duce Rubyx, a symbolic executor that we use to analyze Ruby-on- Rails web applications for security vulnerabilities. Rubyx specifi- cations can easily be adapted to a variety of properties, since they are built from general assertions, assumptions, and object invari- ants. We show how to write Rubyx specifications to detect suscep- tibility to cross-site scripting and cross-site request forgery, insuf- ficient authentication, leaks of secret information, insufficient ac- cess control, as well as application-specific security properties. We used Rubyx to check seven web applications from various sources against our specifications. We found many vulnerabilities, and each application was subject to at least one critical attack. Encourag- ingly, we also found that it was relatively easy to fix most vulner- abilities, and that Rubyx showed the absence of attacks after our fixes. Our results suggest that Rubyx is a promising new way to dis- cover security vulnerabilities in Ruby-on-Rails web applications.},
	keywords     = {automated analysis,symbolic execution,web-application security}
}
@article{Li2014,
	title        = {SymJS: automatic symbolic testing of JavaScript web applications},
	author       = {Guodong Li and Esben Andreasen and Indradeep Ghosh},
	year         = 2014,
	pages        = {449--459},
	doi          = {10.1145/2635868.2635913},
	isbn         = 9781450330565,
	abstract     = {ABSTRACT We present SymJS , a comprehensive framework for automatic testing of client- side JavaScript Web applications. The tool contains a symbolic execution engine for JavaScript, and an automatic event explorer for Web pages. Without any user intervention, ... \n},
	keywords     = {auto-,event sequence,javascript,matic software testing,symbolic execution,taint analysis,web}
}
@inproceedings{wang2017angr,
	title        = {Angr-the next generation of binary analysis},
	author       = {Wang, Fish and Shoshitaishvili, Yan},
	year         = 2017,
	booktitle    = {2017 IEEE Cybersecurity Development (SecDev)},
	pages        = {8--9},
	organization = {IEEE}
}
@inproceedings{hasan2022decap,
	title        = {Decap: Deprivileging Programs by Reducing Their Capabilities},
	author       = {Hasan, Md Mehedi and Ghavamnia, Seyedhamed and Polychronakis, Michalis},
	year         = 2022,
	booktitle    = {Proceedings of the 25th International Symposium on Research in Attacks, Intrusions and Defenses (RAID)}
}
@inbook{Jin2010,
	title        = {K-Means Clustering},
	author       = {Jin, Xin and Han, Jiawei},
	year         = 2010,
	booktitle    = {Encyclopedia of Machine Learning},
	publisher    = {Springer US}
}
@inproceedings{spectralclustering,
	title        = {On Spectral Clustering: Analysis and an Algorithm},
	author       = {Ng, Andrew Y. and Jordan, Michael I. and Weiss, Yair},
	year         = 2001,
	booktitle    = {Proceedings of the 14th International Conference on Neural Information Processing Systems: Natural and Synthetic},
	location     = {Vancouver, British Columbia, Canada},
	publisher    = {MIT Press},
	address      = {Cambridge, MA, USA},
	series       = {NIPS'01},
	pages        = {849–856},
	abstract     = {Despite many empirical successes of spectral clustering methods— algorithms that cluster points using eigenvectors of matrices derived from the data—there are several unresolved issues. First. there are a wide variety of algorithms that use the eigenvectors in slightly different ways. Second, many of these algorithms have no proof that they will actually compute a reasonable clustering. In this paper, we present a simple spectral clustering algorithm that can be implemented using a few lines of Matlab. Using tools from matrix perturbation theory, we analyze the algorithm, and give conditions under which it can be expected to do well. We also show surprisingly good experimental results on a number of challenging clustering problems.},
	numpages     = 8
}
@inproceedings{dbscan,
	title        = {A Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise},
	author       = {Ester, Martin and Kriegel, Hans-Peter and Sander, J\"{o}rg and Xu, Xiaowei},
	year         = 1996,
	booktitle    = {Proceedings of the Second International Conference on Knowledge Discovery and Data Mining},
	location     = {Portland, Oregon},
	publisher    = {AAAI Press},
	series       = {KDD'96},
	abstract     = {Clustering algorithms are attractive for the task of class identification in spatial databases. However, the application to large spatial databases rises the following requirements for clustering algorithms: minimal requirements of domain knowledge to determine the input parameters, discovery of clusters with arbitrary shape and good efficiency on large databases. The well-known clustering algorithms offer no solution to the combination of these requirements. In this paper, we present the new clustering algorithm DBSCAN relying on a density-based notion of clusters which is designed to discover clusters of arbitrary shape. DBSCAN requires only one input parameter and supports the user in determining an appropriate value for it. We performed an experimental evaluation of the effectiveness and efficiency of DBSCAN using synthetic data and real data of the SEQUOIA 2000 benchmark. The results of our experiments demonstrate that (1) DBSCAN is significantly more effective in discovering clusters of arbitrary shape than the well-known algorithm CLAR-ANS, and that (2) DBSCAN outperforms CLARANS by a factor of more than 100 in terms of efficiency.},
	keywords     = {clustering algorithms, arbitrary shape of clusters, efficiency on large spatial databases, handling nlj4-275oise}
}
@article{bholowalia2014ebk,
	title        = {EBK-means: A clustering technique based on elbow method and k-means in WSN},
	author       = {Bholowalia, Purnima and Kumar, Arvind},
	year         = 2014,
	journal      = {International Journal of Computer Applications},
	publisher    = {Citeseer}
}
